From ae1857ca252799148b7d7ede478ef146a43405f4 Mon Sep 17 00:00:00 2001
From: Axel Huebl <axel.huebl@plasma.ninja>
Date: Fri, 5 Aug 2022 13:36:20 -0700
Subject: [PATCH 1/2] Fix: NoConstructAllocator Includes

The `src/NoConstructAllocator.hh` file lacks all required includes,
which leads to compilation errors on some systems.
---
 src/NoConstructAllocator.hh | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/src/NoConstructAllocator.hh b/src/NoConstructAllocator.hh
index d464b12..56e5f34 100644
--- a/src/NoConstructAllocator.hh
+++ b/src/NoConstructAllocator.hh
@@ -6,6 +6,16 @@
 #ifndef LAPACK_NO_CONSTRUCT_ALLOCATOR_HH
 #define LAPACK_NO_CONSTRUCT_ALLOCATOR_HH
 
+#include <cstddef>  // std::size_t
+#include <limits>   // std::numeric_limits
+#include <new>      // std::bad_alloc, std::bad_array_new_length
+#include <vector>   // std::vector
+#if defined( _WIN32 ) || defined( _WIN64 )
+#   include <malloc.h>  // _aligned_malloc, _aligned_free
+#else
+#   include <stdlib.h>  // posix_memalign, free
+#endif
+
 namespace lapack {
 
 // No-construct allocator type which allocates / deallocates.
@@ -78,4 +88,4 @@ using vector = std::vector< T, NoConstructAllocator<T> >;
 
 }  // namespace lapack
 
-#endif  // LAPACK_NO_CONSTRUCT_ALLOCATOR_HH
\ No newline at end of file
+#endif  // LAPACK_NO_CONSTRUCT_ALLOCATOR_HH
-- 
2.25.1


From 46edd2a664bd9c7eb4ef57f18fad2458219a68a5 Mon Sep 17 00:00:00 2001
From: Axel Huebl <axel.huebl@plasma.ninja>
Date: Fri, 5 Aug 2022 16:08:44 -0700
Subject: [PATCH 2/2] Fix: _aligned_malloc call

The closing bracket was misplaced, leading to a compile error.
---
 src/NoConstructAllocator.hh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/NoConstructAllocator.hh b/src/NoConstructAllocator.hh
index 56e5f34..a718c29 100644
--- a/src/NoConstructAllocator.hh
+++ b/src/NoConstructAllocator.hh
@@ -45,7 +45,7 @@ struct NoConstructAllocator
 
         void* memPtr = nullptr;
         #if defined( _WIN32 ) || defined( _WIN64 )
-            memPtr = _aligned_malloc( n*sizeof(T, 64) );
+            memPtr = _aligned_malloc( n*sizeof(T), 64 );
             if (memPtr != nullptr) {
                 auto p = static_cast<T*>(memPtr);
                 return p;
-- 
2.25.1

